package core;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;

import main.Main;
import utilities.AdvancedFilters;

public class ReflectiveEntity 
	extends Entity
{
	private Color c;
	private Entity tiedEntity;
	private double reflectivity;
	private Plane plane;
	
	public enum Plane
	{
		POSITIVE_Y, NEGATIVE_Y, POSITIVE_X, NEGATIVE_X
	};
	
	public ReflectiveEntity(BufferedImage image, int xs, int ys, boolean solid, double x, double y, int z,
			int maxHealth, boolean isInvinsible, Plane plane, double reflectivity) 
	{
		super(STATIC, image, xs, ys, solid, x, y, z, maxHealth, isInvinsible);
		this.reflectivity = reflectivity;
		this.plane = plane;
		updateImage(ReflectiveEntityHandler.STATIC_REFLECTIONS);
		setTransparancy(true);
	}
	
	public ReflectiveEntity(Image image, int xs, int ys, boolean solid, double x, double y, int z,
			int maxHealth, boolean isInvinsible, Plane plane, double reflectivity) 
	{
		super(STATIC, image, xs, ys, solid, x, y, z, maxHealth, isInvinsible);
		this.reflectivity = reflectivity;
		this.plane = plane;
		updateImage(ReflectiveEntityHandler.STATIC_REFLECTIONS);
		setTransparancy(true);
	}
	
	public void setColor(Color c)
	{
		this.c = c;
	}
	
	public Color getColor()
	{
		return c;
	}
	
	public BufferedImage generateReflections(int reflectionType)
	{
		if (reflectivity == 0)
			return null;
		double nx = x;
		double ny = y;
		if (plane == Plane.NEGATIVE_Y)
			ny -= ys;
		else if (plane == Plane.POSITIVE_Y)
			ny += ys;
		else if (plane == Plane.NEGATIVE_X)
			nx -= xs;
		else if (plane == Plane.POSITIVE_X)
			nx += xs;
		
		Entity e = new Entity(Entity.STATIC, true, "reflection generator", nx, ny, 100, (int) xs, (int) ys, 100, false);
		e.setImage(ResourceHandler.defaultTextureImage);
		e.setVisible(true);
		//Main.getEntityHandler().addStaticEntity(e);
		Entity[] entities = e.getCollisions(true);
		BufferedImage buffImg = new BufferedImage((int) xs, (int) ys, BufferedImage.TYPE_INT_ARGB);
		Graphics g = buffImg.getGraphics();
		if (entities == null)
		{
			return buffImg;
		}
		if (entities.length == 0)
		{
			return buffImg;
		}
		//g.fillRect(0, 0, (int) width, (int) height);
		for (int i = 0; i < entities.length; i++)
		{
			if (entities[i] != null)
			{
				if ((reflectionType == ReflectiveEntityHandler.FAST_DYNAMIC_REFLECTIONS &&
						entities[i].shouldRenderInReflections() && entities[i].getLOD() <= Main.getEntityHandler().currLod) || 
						(reflectionType == ReflectiveEntityHandler.FULL_DYNAMIC_REFLECTIONS && entities[i].getLOD() <= Main.getEntityHandler().currLod) || 
						(reflectionType == ReflectiveEntityHandler.STATIC_REFLECTIONS && entities[i].isStatic() && entities[i].getLOD() <= Main.getEntityHandler().currLod))
				{
					int reflX = /*(int) (x - entities[i].getX());*/ (int) (entities[i].getX() - x);
					int reflY = /*(int) (y - entities[i].getY());*/ (int) (entities[i].getY() - y + ys);
					//Main.println("reflecting " + entities[i]);
					//Main.println("reflected to " + reflX + ", " + reflY);
					g.drawImage(entities[i].getBufferedImage().getScaledInstance((int) entities[i].getScaleX(), (int) entities[i].getScaleY(), Image.SCALE_DEFAULT), 
							reflX, reflY, null);
				}
			}
		}
		BufferedImage newBuff = AdvancedFilters.flipHorizontal(buffImg);
		return newBuff;
	}
	
	public void updateImage(int reflectionType)
	{
		BufferedImage create = new BufferedImage(xs, ys, BufferedImage.TYPE_INT_ARGB);
		Graphics g = create.getGraphics();
		g.drawImage(image, 0, 0, null);
		buffImage = create;
		
		BufferedImage overlay = generateReflections(reflectionType);
		if (overlay != null)
			overlay = AdvancedFilters.makeImageTranslucent(overlay, reflectivity);
		overlay = AdvancedFilters.blur(overlay, 2);
		g = buffImage.getGraphics();
		g.drawImage(overlay, 0, 0, null);
		if (tiedEntity != null)
			Main.getEntityHandler().removeEntity(tiedEntity);
		tiedEntity = new Entity(STATIC, create, xs, ys, isSolid, x, y, z, 100, false);
		tiedEntity.setName("Reflective entity");
		tiedEntity.width = xs;
		tiedEntity.height = ys;
		tiedEntity.setTransparancy(isTransparent());
		Main.getEntityHandler().addStaticEntity(tiedEntity);
		//Entity e = new Entity(STATIC, buffImage, xs, ys, false, 500, 500, 100, 100, false);
	}
}
